{"version":3,"sources":["angular-money-directive.min.js"],"names":["NUMBER_REGEXP","DEFAULT_PRECISION","angular","module","directive","$parse","link","scope","el","attrs","ngModelCtrl","round","num","d","Math","pow","precision","formatPrecision","value","parseFloat","toFixed","isPrecisionValid","isNaN","updateValuePrecision","modelValue","$modelValue","ngModel","assign","$viewValue","$render","minVal","maxVal","lastValidValue","isDefined","isUndefined","isNumber","$parsers","push","indexOf","empty","$isEmpty","test","$setValidity","$validators","min","ngMin","$observe","val","undefined","$validate","max","ngMax","parseInt","$formatters","bind","restrict","require"],"mappings":"CAAA,WACA,YAOA,IAAIA,GAAgB,qCAChBC,EAAoB,CAExBC,SAAQC,OAAO,oBAEdC,UAAU,SAAU,SAAU,SAAUC,GACvC,QAASC,GAAKC,EAAOC,EAAIC,EAAOC,GAW9B,QAASC,GAAMC,GACb,GAAIC,GAAIC,KAAKC,IAAI,GAAIC,EACrB,OAAOF,MAAKH,MAAMC,EAAMC,GAAKA,EAQ/B,QAASI,GAAgBC,GACvB,MAAOC,YAAWD,GAAOE,QAAQJ,GAGnC,QAASK,KACP,OAAQC,MAAMN,IAAcA,EAAY,GAG1C,QAASO,KAEP,GAAIC,GAAad,EAAYe,aAExBH,MAAME,IAAeH,MACxBX,EAAYe,YAAcd,EAAMa,GAChCnB,EAAOI,EAAMiB,SAASC,OAAOpB,EAAOG,EAAYe,aAEhDf,EAAYkB,WAAaX,EAAgBO,GACzCd,EAAYmB,WArChB,GAAIC,GAAQC,EAAQf,EAAWgB,EAC3BC,EAAY/B,QAAQ+B,UACpBC,EAAchC,QAAQgC,YACtBC,EAAWjC,QAAQiC,QAuCvBzB,GAAY0B,SAASC,KAAK,SAAUnB,GAC9BgB,EAAYhB,KACdA,EAAQ,IAIiB,IAAvBA,EAAMoB,QAAQ,OAChBpB,EAAQ,IAAMA,GAIW,IAAvBA,EAAMoB,QAAQ,OACZR,GAAU,GACZZ,EAAQ,KACRR,EAAYkB,WAAa,GACzBlB,EAAYmB,WACO,MAAVX,IACTA,EAAQ,IAIZ,IAAIqB,GAAQ7B,EAAY8B,SAAStB,EAajC,OAZIqB,IAASvC,EAAcyC,KAAKvB,GAC9Bc,EAA4B,KAAVd,EACd,KACCqB,EAAQrB,EAAQC,WAAWD,IAGhCR,EAAYkB,WAAaI,EACzBtB,EAAYmB,WAGdnB,EAAYgC,aAAa,UAAU,GAE5BV,IAKTtB,EAAYiC,YAAYC,IAAM,SAAU1B,GACtC,MAAOR,GAAY8B,SAAStB,IAAUgB,EAAYJ,IAAWZ,GAASY,GAEpEG,EAAUxB,EAAMmC,MAAQnC,EAAMoC,MAChCpC,EAAMqC,SAAS,MAAO,SAASC,GACzBd,EAAUc,KAASZ,EAASY,KAC9BA,EAAM5B,WAAW4B,EAAK,KAExBjB,EAASK,EAASY,KAASzB,MAAMyB,GAAOA,EAAMC,OAC9CtC,EAAYuC,cAGdnB,EAAS,GAKPG,EAAUxB,EAAMyC,MAAQzC,EAAM0C,SAChCzC,EAAYiC,YAAYO,IAAM,SAAShC,GACrC,MAAOR,GAAY8B,SAAStB,IAAUgB,EAAYH,IAAoBA,GAATb,GAG/DT,EAAMqC,SAAS,MAAO,SAASC,GACzBd,EAAUc,KAASZ,EAASY,KAC9BA,EAAM5B,WAAW4B,EAAK,KAExBhB,EAASI,EAASY,KAASzB,MAAMyB,GAAOA,EAAMC,OAC9CtC,EAAYuC,eAKZhB,EAAUxB,EAAMO,WAClBP,EAAMqC,SAAS,YAAa,SAAU5B,GACpCF,EAAYoC,SAASlC,EAAO,IAE5BK,MAGFP,EAAYf,EAGdS,EAAY0B,SAASC,KAAK,SAAUnB,GAClC,MAAIA,GAEFc,EAAiBX,IAAqBV,EAAMO,GAASA,EAG9CA,IAIXR,EAAY2C,YAAYhB,KAAK,SAAUnB,GACrC,MAAIA,GACKG,IAAqBJ,EAAgBC,GAASA,EAE9C,KAKXV,EAAG8C,KAAK,OAAQ/B,GAGlB,OACEgC,SAAU,IACVC,QAAS,UACTlD,KAAMA","file":"angular-money-directive.min.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * Heavily adapted from the `type=\"number\"` directive in Angular's\n * /src/ng/directive/input.js\n */\n\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\nvar DEFAULT_PRECISION = 2;\n\nangular.module('fiestah.money', [])\n\n.directive('money', [\"$parse\", function ($parse) {\n  function link(scope, el, attrs, ngModelCtrl) {\n    var minVal, maxVal, precision, lastValidValue;\n    var isDefined = angular.isDefined;\n    var isUndefined = angular.isUndefined;\n    var isNumber = angular.isNumber;\n\n    /**\n     * Returns a rounded number in the precision setup by the directive\n     * @param  {Number} num Number to be rounded\n     * @return {Number}     Rounded number\n     */\n    function round(num) {\n      var d = Math.pow(10, precision);\n      return Math.round(num * d) / d;\n    }\n\n    /**\n     * Returns a string that represents the rounded number\n     * @param  {Number} value Number to be rounded\n     * @return {String}       The string representation\n     */\n    function formatPrecision(value) {\n      return parseFloat(value).toFixed(precision);\n    }\n\n    function isPrecisionValid() {\n      return !isNaN(precision) && precision > -1;\n    }\n\n    function updateValuePrecision() {\n      // $modelValue shows up as NaN in 1.2 on init\n      var modelValue = ngModelCtrl.$modelValue;\n\n      if (!isNaN(modelValue) && isPrecisionValid()) {\n        ngModelCtrl.$modelValue = round(modelValue);\n        $parse(attrs.ngModel).assign(scope, ngModelCtrl.$modelValue);\n\n        ngModelCtrl.$viewValue = formatPrecision(modelValue);\n        ngModelCtrl.$render();\n      }\n    }\n\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (isUndefined(value)) {\n        value = '';\n      }\n\n      // Handle leading decimal point, like \".5\"\n      if (value.indexOf('.') === 0) {\n        value = '0' + value;\n      }\n\n      // Allow \"-\" inputs only when min < 0\n      if (value.indexOf('-') === 0) {\n        if (minVal >= 0) {\n          value = null;\n          ngModelCtrl.$viewValue = '';\n          ngModelCtrl.$render();\n        } else if (value === '-') {\n          value = '';\n        }\n      }\n\n      var empty = ngModelCtrl.$isEmpty(value);\n      if (empty || NUMBER_REGEXP.test(value)) {\n        lastValidValue = (value === '')\n          ? null\n          : (empty ? value : parseFloat(value));\n      } else {\n        // Render the last valid input in the field\n        ngModelCtrl.$viewValue = lastValidValue;\n        ngModelCtrl.$render();\n      }\n\n      ngModelCtrl.$setValidity('number', true);\n\n      return lastValidValue;\n    });\n\n\n    // Min validation\n    ngModelCtrl.$validators.min = function (value) {\n      return ngModelCtrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n    };\n    if (isDefined(attrs.min) || attrs.ngMin) {\n      attrs.$observe('min', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        minVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    } else {\n      minVal = 0;\n    }\n\n\n    // Max validation\n    if (isDefined(attrs.max) || attrs.ngMax) {\n      ngModelCtrl.$validators.max = function(value) {\n        return ngModelCtrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n      };\n\n      attrs.$observe('max', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        maxVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    }\n\n    // Round off (disabled by \"-1\")\n    if (isDefined(attrs.precision)) {\n      attrs.$observe('precision', function (value) {\n        precision = parseInt(value, 10);\n\n        updateValuePrecision();\n      });\n    } else {\n      precision = DEFAULT_PRECISION;\n    }\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (value) {\n        // Save with rounded value\n        lastValidValue = isPrecisionValid() ? round(value) : value;\n        return lastValidValue;\n      } else {\n        return value;\n      }\n    });\n\n    ngModelCtrl.$formatters.push(function (value) {\n      if (value) {\n        return isPrecisionValid() ? formatPrecision(value) : value;\n      } else {\n        return '';\n      }\n    });\n\n    // Auto-format precision on blur\n    el.bind('blur', updateValuePrecision);\n  }\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: link\n  };\n}]);\n\n})();\n"],"sourceRoot":"/source/"}